<!DOCTYPE html>
<html lang="en">
<head>
  	<meta charset="utf-8">
  	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  	<meta name="author" content="David Hu">

  	<title>d3test</title>
	<link rel="stylesheet" href="../css/bootstrap.css" />
	<link rel="stylesheet" href="../fortawesome/css/font-awesome.min.css" />
	<link href="../css/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" />
	<link href='http://fonts.googleapis.com/css?family=Open+Sans:400,600' rel='stylesheet' type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Ubuntu' rel='stylesheet' type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Grand+Hotel' rel='stylesheet' type='text/css'>
	<script src="http://d3js.org/d3.v3.min.js"></script>
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
	<script type="text/javascript" src="../js/graph.js"></script>
	<!--[if lt IE 9]>
	<script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
</head>
<body>

	<div id="top">
		<h1>snapgraph</h1>
		<input type="text" id="search" />
		<div class="icon-search" style="position:relative;right:35px;top:-3px;"></div>
		<i class="icon-globe icon-2x" id="globe"></i>
	</div>
	<div id="main">
		<div id="tooltip" style="position:absolute;">octopi</div>
		<div id="chart"></div>
	</div>
	<div id="bottom"></div>
	<img src="../img/graphs.png" id="graphbg" />

	<script>
	$(document).ready(function() {
		// tooltip always follows mouse
		$('body').mousemove(function(e) {
			$('#tooltip').css({'top': e.clientY + 20, 'left': e.clientX});
		});

		$('#search').keypress(function(e) {
			if(e.which === 13) {
				console.log('yo');
				$('#top').animate({
					marginTop: '2%'
				}, 400, function() { console.log('done'); });
				$('#chart').fadeIn(400, function() {
					// START D3 SHIT
					var w = 650,
					    h = 500,
					    node,
					    link,
					    root,
					    colorscale = d3.scale.category10();

					var force = d3.layout.force()
					    .on("tick", tick)
					    .charge(function(d) { return d._children ? -d.size : -30; })
					    .linkDistance(function(d) { return d.target._children ? 80 : 30; })
					    .size([w, h]);

					var vis = d3.select("#chart").append("svg")
					    .attr("width", w)
					    .attr("height", h);

					d3.json("getuser?u=" + $('#search').val(), function(json) {
					  root = json;
					  root.fixed = true;
					  root.x = w / 2;
					  root.y = h / 2;
					  update();
					});

					function update() {
					  var nodes = flatten(root),
					      links = d3.layout.tree().links(nodes);

					  // Restart the force layout.
					  force
					      .nodes(nodes)
					      .links(links)
					      .start();

					  // Update the links…
					  link = vis.selectAll("line.link")
					      .data(links, function(d) { return d.target.id; });

					  // Enter any new links.
					  link.enter().insert("line", ".node")
					      .attr("class", "link")
					      .attr("x1", function(d) { return d.source.x; })
					      .attr("y1", function(d) { return d.source.y; })
					      .attr("x2", function(d) { return d.target.x; })
					      .attr("y2", function(d) { return d.target.y; });

					  // Exit any old links.
					  link.exit().remove();

					  // Update the nodes…
					  node = vis.selectAll("circle.node")
					      .data(nodes, function(d) { return d.id; })
					      .style("fill", color);

					  node.transition()
					      .attr("r", function(d) { return d.friends ? 4.5 : d.size; });

					  // Enter any new nodes.
					  node.enter().append("svg:image")
					      .attr("xlink:href", "https://si0.twimg.com/profile_images/2725831401/e98e6c21340c5986961b016742a03312_bigger.png")
					      .attr("width", 50)
					      .attr("height", 50)
					      .attr("class", "node")
					      .attr("x", function(d) { return d.x; })
					      .attr("y", function(d) { return d.y; })
					      .style("fill", color)
					      .on("mouseover", mouseover)
					      .call(force.drag);

					  // Exit any old nodes.
					  node.exit().remove();
					}

					function tick() {
					  link.attr("x1", function(d) { return d.source.x; })
					      .attr("y1", function(d) { return d.source.y; })
					      .attr("x2", function(d) { return d.target.x; })
					      .attr("y2", function(d) { return d.target.y; });

					  node.attr("x", function(d) { return d.x; })
					      .attr("y", function(d) { return d.y; });
					}

					// Color leaf nodes orange, and packages white or blue.
					function color(d) {
					//  return d._children ? "#3182bd" : d.friends ?  : "#fd8d3c";
					  return d._children ? "#3182bd" : d.friends ? "#c6dbef" : colorscale(d.size);
					}

					// Toggle friends on click.
					function click(d) {
					  if (d.friends) {
					    d._children = d.friends;
					    d.friends = null;
					  } else {
					    d.friends = d._children;
					    d._children = null;
					  }
					  update();
					}

					function mouseover(d) {
						console.log(d3.select(d));
						var svg = d3.select(d)[0][0];
						if(!svg.name) {
							$('#tooltip').html(svg._id);
						} else {
							$('#tooltip').html(svg.name);	
						}
					}

					// Returns a list of all nodes under the root.
					function flatten(root) {
					  var nodes = [], i = 0;

					  function recurse(node) {
					    if (node.friends) node.size = node.friends.reduce(function(p, v) { return p + recurse(v); }, 0);
					    if (!node.id) node.id = ++i;
					    nodes.push(node);
					    return node.size;
					  }

					  root.size = recurse(root);
					  return nodes;
					}
				});
				e.preventDefault();
			}
		});
	});
	</script>
</body>
</html>